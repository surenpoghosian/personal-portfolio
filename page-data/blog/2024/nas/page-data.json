{"componentChunkName":"component---src-templates-post-tsx-content-file-path-src-posts-2024-nas-index-mdx","path":"/blog/2024/nas/","result":{"data":{"mdx":{"id":"38dc8f3b-f397-5f87-953a-dca1236fb0e5","body":"\n\n\n![Prototype](./assets/1.jpg)\n\n### Creating Your Own “Google Drive” with a Raspberry Pi and Nextcloud\n\nImagine having your own private cloud storage—like Google Drive or Dropbox—but without monthly fees, data limits, or privacy concerns. That’s exactly what I built using a Raspberry Pi, some hard drives, and Nextcloud, a powerful open-source tool that turns your hardware into a personal, accessible-from-anywhere cloud solution.\n\n## Why Make a Personal Cloud Storage?\n\nServices like Google Drive, Dropbox, and iCloud are super convenient for storing photos, documents, and more. But they come with some limitations:\n\n- **Monthly Fees**: Extra storage often means paying for a monthly or annual subscription.\n-\t**Privacy Concerns**: Your files are stored on someone else’s servers, which may raise concerns about data security and access.\n\nWith a personal cloud setup, I don’t pay any monthly fees, and I have complete control over where my files are stored and who can access them.\n\n## What I Used\n\nHere are the main components I used for this project:\n\n-\t**Raspberry Pi 5 (8GB RAM)** - Running Ubuntu 24 LTS Server.\n-\t**5-bay HDD enclosure** - This is where I connected my hard drives.\n-\t**Three hard drives** – A 6TB Western Digital Red, a 6TB Western Digital Blue, and an 8TB Seagate, giving me a total of 20TB of storage.\n-\t**Docker and Docker Compose** – To simplify the deployment of Nextcloud and the required services.\n-\t**Nginx** – As a reverse proxy for handling web traffic.\n\n### Why Docker and Docker Compose?\n\nUsing Docker allowed me to isolate all the services (Nextcloud, the database, etc.) in containers, making them easier to manage and deploy. With Docker Compose, I was able to define and start the entire setup with one command by simply configuring the **docker-compose.yml** file. This setup also makes it easier to update or migrate in the future.\n\n\n## Setting Up the Raspberry Pi\n\nI started by installing Ubuntu 24 LTS Server on the Raspberry Pi. I flashed the Ubuntu image onto an SD card using Balena Etcher and booted up the Raspberry Pi. Once connected to my network, I accessed the Pi using SSH from my main computer.\n\nAfter logging in, I updated the system:\n\n```bash\nsudo apt update && sudo apt upgrade\n```\n\n## Installing Docker and Docker Compose\n\nTo simplify the deployment of Nextcloud, I installed Docker and Docker Compose on the Raspberry Pi:\n\n```bash\nsudo apt install docker.io\nsudo apt install docker-compose\n```\n\nAlso make sure the Docker service was running:\n\n```bash\nsudo systemctl start docker\nsudo systemctl enable docker\n```\n\n## Mounting the Hard Drives\n\nI connected the 5-bay HDD enclosure via USB to the Raspberry Pi, which held the three hard drives (6TB WD Red, 6TB WD Blue, and 8TB Seagate). After connecting, I mounted them manually using the following steps:\n\n```bash\nsudo mkdir /mnt/hdd1 /mnt/hdd2 /mnt/hdd3\nsudo mount /dev/sda1 /mnt/hdd1\nsudo mount /dev/sdb1 /mnt/hdd2\nsudo mount /dev/sdc1 /mnt/hdd3\n```\n\nTo ensure the drives automatically mount on reboot, I added the relevant entries in the /etc/fstab file.\n\n## Creating the Docker Compose File\n\nNext, I created the docker-compose.yml file to define the services needed for Nextcloud. Here’s the content of the file:\n\n```yaml\nversion: '3'\n\nservices:\n  db:\n    image: mariadb\n    restart: always\n    volumes:\n      - db_data:/var/lib/mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: rootpassword\n      MYSQL_DATABASE: nextcloud\n      MYSQL_USER: ncuser\n      MYSQL_PASSWORD: password\n\n  app:\n    image: nextcloud\n    ports:\n      - \"8080:80\"\n    volumes:\n      - nextcloud_data:/var/www/html\n      - /mnt/hdd1:/mnt/hdd1\n      - /mnt/hdd2:/mnt/hdd2\n      - /mnt/hdd3:/mnt/hdd3\n    environment:\n      MYSQL_PASSWORD: password\n      MYSQL_DATABASE: nextcloud\n      MYSQL_USER: ncuser\n      MYSQL_HOST: db\n    depends_on:\n      - db\n\nvolumes:\n  db_data:\n  nextcloud_data:\n```\n\n### This file defines two main services:\n\n-\t**db:** The MariaDB database container.\n-\t**app:** The Nextcloud application, connected to the database and exposing port 8080 on the Pi for access.\n\n## Setting Up Nginx as a Reverse Proxy\n\nTo manage traffic and secure the connection, I set up Nginx as a reverse proxy. I created an nginx.conf file to forward traffic from port 80 and handle SSL:\n\n```nginx\nserver {\n    listen 80;\n    server_name your-domain.com;\n\n    location / {\n        proxy_pass http://localhost:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n\nserver {\n    listen 443 ssl;\n    server_name your-domain.com;\n\n    ssl_certificate /etc/nginx/ssl/nginx.crt;\n    ssl_certificate_key /etc/nginx/ssl/nginx.key;\n\n    location / {\n        proxy_pass http://localhost:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n```\n\nAfter creating the config, I installed Nginx and enabled the configuration:\n\n```bash\nsudo apt install nginx\nsudo systemctl start nginx\nsudo systemctl enable nginx\n```\n\n## Running the Docker Containers\n\nWith everything set up, I ran the following command to start the Docker containers:\n\n```bash\nsudo docker-compose up -d\n```\n\nDocker pulled the necessary images and set up the containers. Now, Nextcloud and MariaDB were running in isolated containers.\n\n## Accessing Nextcloud and Setting Up SSL\n\nOnce the containers were up and running, I accessed Nextcloud by navigating to the Raspberry Pi’s IP address in my browser (e.g., http://your-pi-ip:8080). From there, I completed the web-based setup and pointed Nextcloud to store files on the mounted HDDs.\n\n![Prototype](./assets/nextcloud.jpg)\n\nI also secured my setup by installing Let’s Encrypt to enable HTTPS with a free SSL certificate:\n\n```bash\nsudo apt install certbot python3-certbot-nginx\nsudo certbot --nginx\n```\n\n## Why This Setup Works for Me\n\nWith Docker and Docker Compose, managing the NAS is much simpler. All the services (Nextcloud, database, etc.) are contained, and if I ever need to update or migrate the setup, it’s as easy as modifying the docker-compose.yml file. The 20TB of storage provided by the three hard drives gives me plenty of room for file storage, and using Nextcloud allows me to access these files from anywhere in the world.\n\n![Prototype](./assets/2.jpeg)\n\nNow, I have my own “Google Drive,” but with full control, no subscription fees, and the freedom to expand as my storage needs grow.\nIf you’re looking for a way to have all the convenience of cloud storage without the limitations, building your own with Nextcloud and a Raspberry Pi is a great option to consider!\n\n\n\nLinks: \n- [Nextcloud github](https://github.com/nextcloud)\n- [Nextcloud docker](https://github.com/nextcloud/all-in-one#nextcloud-all-in-one)\n- [Raspberry Pi 5](https://www.amazon.com/dp/B0CPWH8FL9?ref=ppx_yo2ov_dt_b_fed_asin_title&th=1)\n- [Raspberry case](https://www.amazon.com/dp/B0D1JYTXSS?ref=ppx_yo2ov_dt_b_fed_asin_title)\n- [Raspberry cooler](https://www.amazon.com/dp/B0D1JYTXSS?ref=ppx_yo2ov_dt_b_fed_asin_title)\n- [Hdd enclosure](https://www.amazon.com/dp/B08G4489Z1?ref=ppx_yo2ov_dt_b_fed_asin_title)\n- [WD red 6tb](https://www.amazon.com/dp/B0BDXQ61Z9?ref=ppx_yo2ov_dt_b_fed_asin_title&th=1)\n- [WD blue 6tb](https://www.amazon.com/dp/B0BNGL4BND?ref=ppx_yo2ov_dt_b_fed_asin_title&th=1)\n- [Seagate 8tb](https://www.amazon.com/dp/B07H289S7C?ref=ppx_yo2ov_dt_b_fed_asin_title&th=1)","fields":{"slug":"/blog/2024/nas/"},"internal":{"contentFilePath":"/home/runner/work/personal-portfolio/personal-portfolio/src/posts/2024/nas/index.mdx"},"frontmatter":{"title":"Building a 20TB Raspberry Pi Network Attached Storage with Nextcloud and Ubuntu 24","summary":"I’ll walk you through building a powerful and scalable 20TB network-attached storage (NAS) system using a Raspberry Pi and Nextcloud. Learn how I configured my Raspberry Pi running Ubuntu 24 to create an accessible, secure, and efficient cloud storage solution. With open-source software and a few components, you can turn your Raspberry Pi into a personal cloud storage system that rivals commercial alternatives, accessible from anywhere in the world.","date":"20 October, 2024","cover":{"childImageSharp":{"gatsbyImageData":{"layout":"fullWidth","backgroundColor":"#080808","images":{"fallback":{"src":"/static/f04da2bd324bd674babb499d09fef3d7/afa97/cover.jpg","srcSet":"/static/f04da2bd324bd674babb499d09fef3d7/d5c88/cover.jpg 750w,\n/static/f04da2bd324bd674babb499d09fef3d7/afa97/cover.jpg 1024w","sizes":"100vw"},"sources":[{"srcSet":"/static/f04da2bd324bd674babb499d09fef3d7/0a2e4/cover.webp 750w,\n/static/f04da2bd324bd674babb499d09fef3d7/91afa/cover.webp 1024w","type":"image/webp","sizes":"100vw"}]},"width":1,"height":1}}}}}},"pageContext":{"slug":"/blog/2024/nas/","frontmatter":{"title":"Building a 20TB Raspberry Pi Network Attached Storage with Nextcloud and Ubuntu 24","summary":"I’ll walk you through building a powerful and scalable 20TB network-attached storage (NAS) system using a Raspberry Pi and Nextcloud. Learn how I configured my Raspberry Pi running Ubuntu 24 to create an accessible, secure, and efficient cloud storage solution. With open-source software and a few components, you can turn your Raspberry Pi into a personal cloud storage system that rivals commercial alternatives, accessible from anywhere in the world.","cover":"assets/cover.png","date":"2024-10-20T00:00:00.000Z"}}},"staticQueryHashes":[],"slicesMap":{}}